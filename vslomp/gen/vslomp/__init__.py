# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: player.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import AsyncIterator, Optional

import betterproto
import grpclib


@dataclass(eq=False, repr=False)
class Result(betterproto.Message):
    ok: bool = betterproto.bool_field(1)
    err: str = betterproto.string_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ShowScreen(betterproto.Message):
    screen_path: str = betterproto.string_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ShowScreenResult(betterproto.Message):
    result: "Result" = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class LoadVideo(betterproto.Message):
    video_path: str = betterproto.string_field(1)
    vstream_idx: int = betterproto.uint32_field(2)
    frame_wait: float = betterproto.float_field(3)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class LoadVideoResult(betterproto.Message):
    result: "Result" = betterproto.message_field(1)
    frame_count: int = betterproto.uint32_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class Play(betterproto.Message):
    start: Optional[int] = betterproto.message_field(1, wraps=betterproto.TYPE_INT32)
    stop: Optional[int] = betterproto.message_field(2, wraps=betterproto.TYPE_INT32)
    step: Optional[int] = betterproto.message_field(3, wraps=betterproto.TYPE_INT32)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class PlayResult(betterproto.Message):
    result: "Result" = betterproto.message_field(1)
    frame_idx: int = betterproto.uint32_field(2)
    done: bool = betterproto.bool_field(3)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class Unload(betterproto.Message):
    pass

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class UnloadResult(betterproto.Message):
    result: "Result" = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


class PlayerServiceStub(betterproto.ServiceStub):
    async def show_screen(self, *, screen_path: str = "") -> "ShowScreenResult":

        request = ShowScreen()
        request.screen_path = screen_path

        return await self._unary_unary(
            "/vslomp.PlayerService/ShowScreen", request, ShowScreenResult
        )

    async def load_video(
        self, *, video_path: str = "", vstream_idx: int = 0, frame_wait: float = 0.0
    ) -> "LoadVideoResult":

        request = LoadVideo()
        request.video_path = video_path
        request.vstream_idx = vstream_idx
        request.frame_wait = frame_wait

        return await self._unary_unary("/vslomp.PlayerService/LoadVideo", request, LoadVideoResult)

    async def play(
        self,
        *,
        start: Optional[int] = None,
        stop: Optional[int] = None,
        step: Optional[int] = None,
    ) -> AsyncIterator["PlayResult"]:

        request = Play()
        if start is not None:
            request.start = start
        if stop is not None:
            request.stop = stop
        if step is not None:
            request.step = step

        async for response in self._unary_stream(
            "/vslomp.PlayerService/Play",
            request,
            PlayResult,
        ):
            yield response

    async def unload(self) -> "UnloadResult":

        request = Unload()

        return await self._unary_unary("/vslomp.PlayerService/Unload", request, UnloadResult)
