"""
This type stub file was generated by pyright.
"""

from abc import ABC
from typing import Any, Callable, Generic, Optional, Tuple, Type, TypeVar, Union

TCmd = TypeVar("TCmd")
class CmdHandle(Generic[TCmd]):
    def __init__(self, tcmd: Type[TCmd], pri: int, entry: int, *tags: Any) -> None:
        ...
    
    def __lt__(self, ls: CmdHandle[TCmd]) -> bool:
        ...
    
    def __repr__(self) -> str:
        ...
    
    @property
    def tcmd(self) -> Type[TCmd]:
        ...
    
    @property
    def pri(self) -> int:
        ...
    
    @property
    def entry(self) -> int:
        ...
    
    @property
    def tags(self) -> Any:
        ...
    


_ResultCallback = Callable[[CmdHandle[TCmd], Optional[Any]], Optional[Any]]
_ErrorCallback = Callable[[CmdHandle[TCmd], Exception], None]
_QueueEntry = Tuple[CmdHandle[TCmd], TCmd]
class BaseCmdProc(ABC, Generic[TCmd]):
    def __init__(self, onresult: Optional[_ResultCallback[TCmd]] = ..., onerror: Optional[_ErrorCallback[TCmd]] = ...) -> None:
        ...
    
    def __del__(self) -> None:
        ...
    
    def on_result(self, cb: _ResultCallback[TCmd]) -> BaseCmdProc[TCmd]:
        ...
    
    def on_error(self, cb: _ErrorCallback[TCmd]) -> BaseCmdProc[TCmd]:
        ...
    
    def start(self) -> None:
        ...
    
    def pause(self) -> None:
        ...
    
    def join(self) -> None:
        ...
    
    def cancel(self) -> bool:
        ...
    
    def send(self, cmd: Union[TCmd, Type[TCmd]], pri: int = ..., *tags: Any) -> CmdHandle[TCmd]:
        ...
    


